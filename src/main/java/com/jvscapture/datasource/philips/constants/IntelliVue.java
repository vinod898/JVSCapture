package com.jvscapture.datasource.philips.constants;

/**
 * Class contains constants used in communicating with Philips IntelliVue
 * monitor
 * 
 * @author OBS Medical
 *
 */
public class IntelliVue {

	/**
	 * 
	 * Alert related constants
	 * 
	 * - These are unsigned 16 bit integer constants in C#
	 */

	/**
	 * 
	 * These are signed 32 bit integer constants in C#
	 *
	 */
	public static class PublicAlarmCodes {
		final int NOM_EVT_ABSENT = 4;
		final int NOM_EVT_CONTAM = 14;
		final int NOM_EVT_DISCONN = 22;
		final int NOM_EVT_DISTURB = 24;
		final int NOM_EVT_EMPTY = 26;
		final int NOM_EVT_ERRATIC = 32;
		final int NOM_EVT_EXH = 36;
		final int NOM_EVT_FAIL = 38;
		final int NOM_EVT_HI = 40;
		final int NOM_EVT_IRREG = 58;
		final int NOM_EVT_LO = 62;
		final int NOM_EVT_MALF = 70;
		final int NOM_EVT_NOISY = 74;
		final int NOM_EVT_OBSTRUC = 80;
		final int NOM_EVT_REVERSED = 96;
		final int NOM_EVT_SUST = 106;
		final int NOM_EVT_UNAVAIL = 110;
		final int NOM_EVT_UNDEF = 112;
		final int NOM_EVT_WARMING = 124;
		final int NOM_EVT_WEAK = 128;
		final int NOM_EVT_BREATH_ABSENT = 136;
		final int NOM_EVT_CALIB_FAIL = 138;
		final int NOM_EVT_CONFIG_ERR = 142;
		final int NOM_EVT_RANGE_ERR = 164;
		final int NOM_EVT_RANGE_OVER = 166;
		final int NOM_EVT_SRC_ABSENT = 174;
		final int NOM_EVT_SYNCH_ERR = 182;
		final int NOM_EVT_BATT_LO = 194;
		final int NOM_EVT_BATT_PROB = 198;
		final int NOM_EVT_CUFF_NOT_DEFLATED = 230;
		final int NOM_EVT_CUFF_INFLAT_OVER = 232;
		final int NOM_EVT_EQUIP_MALF = 242;
		final int NOM_EVT_TUBE_OCCL = 250;
		final int NOM_EVT_GAS_AGENT_IDENT_MALF = 258;
		final int NOM_EVT_LEAD_DISCONN = 268;
		final int NOM_EVT_LEADS_OFF = 274;
		final int NOM_EVT_O2_SUPPLY_LO = 296;
		final int NOM_EVT_OPTIC_MODULE_ABSENT = 298;
		final int NOM_EVT_OPTIC_MODULE_DEFECT = 300;
		final int NOM_EVT_SENSOR_DISCONN = 308;
		final int NOM_EVT_SENSOR_MALF = 310;
		final int NOM_EVT_SENSOR_PROB = 312;
		final int NOM_EVT_SW_VER_UNK = 322;
		final int NOM_EVT_TUBE_DISCONN = 326;
		final int NOM_EVT_TUBE_OBSTRUC = 330;
		final int NOM_EVT_XDUCR_DISCONN = 336;
		final int NOM_EVT_XDUCR_MALF = 338;
		final int NOM_EVT_INTENS_LIGHT_ERR = 350;
		final int NOM_EVT_MSMT_DISCONN = 352;
		final int NOM_EVT_MSMT_ERR = 354;
		final int NOM_EVT_MSMT_FAIL = 356;
		final int NOM_EVT_MSMT_INOP = 358;
		final int NOM_EVT_MSMT_INTERRUP = 362;
		final int NOM_EVT_MSMT_RANGE_OVER = 364;
		final int NOM_EVT_MSMT_RANGE_UNDER = 366;
		final int NOM_EVT_SIG_LO = 380;
		final int NOM_EVT_SIG_UNANALYZEABLE = 384;
		final int NOM_EVT_TEMP_HI_GT_LIM = 394;
		final int NOM_EVT_UNSUPPORTED = 400;
		final int NOM_EVT_WAVE_ARTIF_ERR = 432;
		final int NOM_EVT_WAVE_SIG_QUAL_ERR = 434;
		final int NOM_EVT_MSMT_INTERF_ERR = 436;
		final int NOM_EVT_WAVE_OSCIL_ABSENT = 442;
		final int NOM_EVT_VOLTAGE_OUT_OF_RANGE = 460;
		final int NOM_EVT_INCOMPAT = 600;
		final int NOM_EVT_ADVIS_CHK = 6658;
		final int NOM_EVT_ADVIS_CALIB_AND_ZERO_CHK = 6664;
		final int NOM_EVT_ADVIS_CONFIG_CHK = 6666;
		final int NOM_EVT_ADVIS_SETTINGS_CHK = 6668;
		final int NOM_EVT_ADVIS_SETUP_CHK = 6670;
		final int NOM_EVT_ADVIS_SRC_CHK = 6672;
		final int NOM_EVT_BATT_COND = 6676;
		final int NOM_EVT_BATT_REPLACE = 6678;
		final int NOM_EVT_ADVIS_CABLE_CHK = 6680;
		final int NOM_EVT_ADVIS_GAS_AGENT_CHK = 6688;
		final int NOM_EVT_ADVIS_LEAD_CHK = 6690;
		final int NOM_EVT_ADVIS_SENSOR_CHK = 6696;
		final int NOM_EVT_ADVIS_GAIN_DECR = 6704;
		final int NOM_EVT_ADVIS_GAIN_INCR = 6706;
		final int NOM_EVT_ADVIS_UNIT_CHK = 6710;
		final int NOM_EVT_APNEA = 3072;
		final int NOM_EVT_ECG_ASYSTOLE = 3076;
		final int NOM_EVT_ECG_BEAT_MISSED = 3078;
		final int NOM_EVT_ECG_BIGEM = 3082;
		final int NOM_EVT_ECG_BRADY_EXTREME = 3086;
		final int NOM_EVT_ECG_PACING_NON_CAPT = 3102;
		final int NOM_EVT_ECG_PAUSE = 3108;
		final int NOM_EVT_ECG_TACHY_EXTREME = 3122;
		final int NOM_EVT_ECG_CARD_BEAT_RATE_IRREG = 3158;
		final int NOM_EVT_ECG_PACER_NOT_PACING = 3182;
		final int NOM_EVT_ECG_SV_TACHY = 3192;
		final int NOM_EVT_ECG_V_P_C_RonT = 3206;
		final int NOM_EVT_ECG_V_P_C_MULTIFORM = 3208;
		final int NOM_EVT_ECG_V_P_C_PAIR = 3210;
		final int NOM_EVT_ECG_V_P_C_RUN = 3212;
		final int NOM_EVT_ECG_V_RHY = 3220;
		final int NOM_EVT_ECG_V_TACHY = 3224;
		final int NOM_EVT_ECG_V_TACHY_NON_SUST = 3226;
		final int NOM_EVT_ECG_V_TRIGEM = 3236;
		final int NOM_EVT_DESAT = 3246;
		final int NOM_EVT_ECG_V_P_C_RATE = 3252;
		final int NOM_EVT_STAT_AL_OFF = 6144;
		final int NOM_EVT_STAT_BATT_CHARGING = 6150;
		final int NOM_EVT_STAT_CALIB_MODE = 6152;
		final int NOM_EVT_STAT_CALIB_RUNNING = 6154;
		final int NOM_EVT_STAT_CALIB_INVIVO_RUNNING = 6156;
		final int NOM_EVT_STAT_CALIB_LIGHT_RUNNING = 6158;
		final int NOM_EVT_STAT_CALIB_PREINS_RUNNING = 6160;
		final int NOM_EVT_STAT_SELFTEST_RUNNING = 6164;
		final int NOM_EVT_STAT_ZERO_RUNNING = 6170;
		final int NOM_EVT_STAT_OPT_MOD_SENSOR_CONN = 6172;
		final int NOM_EVT_STAT_OPT_MOD_SENSOR_WARMING = 6174;
		final int NOM_EVT_STAT_SENSOR_WARMING = 6176;
		final int NOM_EVT_STAT_WARMING = 6178;
		final int NOM_EVT_STAT_ECG_AL_ALL_OFF = 6182;
		final int NOM_EVT_STAT_ECG_AL_SOME_OFF = 6184;
		final int NOM_EVT_STAT_LEARN = 6224;
		final int NOM_EVT_STAT_OFF = 6226;
		final int NOM_EVT_STAT_STANDBY = 6228;
		final int NOM_EVT_STAT_DISCONN = 6256;
		final int NOM_EVT_ADVIS_CALIB_REQD = 6662;
		final int NOM_EVT_ECG_V_FIB_TACHY = 61444;
		final int NOM_EVT_WAIT_CAL = 61678;
		final int NOM_EVT_ADVIS_CHANGE_SITE = 61682;
		final int NOM_EVT_ADVIS_CHECK_SITE_TIME = 61684;
		final int NOM_EVT_STAT_FW_UPDATE_IN_PROGRESS = 61688;
		final int NOM_EVT_EXT_DEV_AL_CODE_1 = 61690;
		final int NOM_EVT_EXT_DEV_AL_CODE_2 = 61692;
		final int NOM_EVT_EXT_DEV_AL_CODE_3 = 61694;
		final int NOM_EVT_EXT_DEV_AL_CODE_4 = 61696;
		final int NOM_EVT_EXT_DEV_AL_CODE_5 = 61698;
		final int NOM_EVT_EXT_DEV_AL_CODE_6 = 61700;
		final int NOM_EVT_EXT_DEV_AL_CODE_7 = 61702;
		final int NOM_EVT_EXT_DEV_AL_CODE_8 = 61704;
		final int NOM_EVT_EXT_DEV_AL_CODE_9 = 61706;
		final int NOM_EVT_EXT_DEV_AL_CODE_10 = 61708;
		final int NOM_EVT_EXT_DEV_AL_CODE_11 = 61710;
		final int NOM_EVT_EXT_DEV_AL_CODE_12 = 61712;
		final int NOM_EVT_EXT_DEV_AL_CODE_13 = 61714;
		final int NOM_EVT_EXT_DEV_AL_CODE_14 = 61716;
		final int NOM_EVT_EXT_DEV_AL_CODE_15 = 61718;
		final int NOM_EVT_EXT_DEV_AL_CODE_16 = 61720;
		final int NOM_EVT_EXT_DEV_AL_CODE_17 = 61722;
		final int NOM_EVT_EXT_DEV_AL_CODE_18 = 61724;
		final int NOM_EVT_EXT_DEV_AL_CODE_19 = 61726;
		final int NOM_EVT_EXT_DEV_AL_CODE_20 = 61728;
		final int NOM_EVT_EXT_DEV_AL_CODE_21 = 61730;
		final int NOM_EVT_EXT_DEV_AL_CODE_22 = 61732;
		final int NOM_EVT_EXT_DEV_AL_CODE_23 = 61734;
		final int NOM_EVT_EXT_DEV_AL_CODE_24 = 61736;
		final int NOM_EVT_EXT_DEV_AL_CODE_25 = 61738;
		final int NOM_EVT_EXT_DEV_AL_CODE_26 = 61740;
		final int NOM_EVT_EXT_DEV_AL_CODE_27 = 61742;
		final int NOM_EVT_EXT_DEV_AL_CODE_28 = 61744;
		final int NOM_EVT_EXT_DEV_AL_CODE_29 = 61746;
		final int NOM_EVT_EXT_DEV_AL_CODE_30 = 61748;
		final int NOM_EVT_EXT_DEV_AL_CODE_31 = 61750;
		final int NOM_EVT_EXT_DEV_AL_CODE_32 = 61752;
		final int NOM_EVT_EXT_DEV_AL_CODE_33 = 61754;
		final int NOM_EVT_ST_MULTI = 61756;
		final int NOM_EVT_ADVIS_BSA_REQD = 61760;
		final int NOM_EVT_ADVIS_PRESUMED_CVP = 61762;
		final int NOM_EVT_MSMT_UNSUPPORTED = 61764;
		final int NOM_EVT_BRADY = 61766;
		final int NOM_EVT_TACHY = 61768;
		final int NOM_EVT_ADVIS_CHANGE_SCALE = 61770;
		final int NOM_EVT_MSMT_RESTART = 61772;
		final int NOM_EVT_TOO_MANY_AGENTS = 61774;
		final int NOM_EVT_STAT_PULSE_SRC_RANGE_OVER = 61778;
		final int NOM_EVT_STAT_PRESS_SRC_RANGE_OVER = 61780;
		final int NOM_EVT_MUSCLE_NOISE = 61782;
		final int NOM_EVT_LINE_NOISE = 61784;
		final int NOM_EVT_IMPED_HI = 61786;
		final int NOM_EVT_AGENT_MIX = 61788;
		final int NOM_EVT_IMPEDS_HI = 61790;
		final int NOM_EVT_ADVIS_PWR_HI = 61792;
		final int NOM_EVT_ADVIS_PWR_OFF = 61794;
		final int NOM_EVT_ADVIS_PWR_OVER = 61796;
		final int NOM_EVT_ADVIS_DEACT = 61798;
		final int NOM_EVT_CO_WARNING = 61800;
		final int NOM_EVT_ADVIS_NURSE_CALL = 61802;
		final int NOM_EVT_COMP_MALF = 61804;
		final int NOM_EVT_AGENT_MEAS_MALF = 61806;
		final int NOM_EVT_ADVIS_WATER_TRAP_CHK = 61808;
		final int NOM_EVT_STAT_AGENT_CALC_RUNNING = 61810;
		final int NOM_EVT_ADVIS_ADAPTER_CHK = 61814;
		final int NOM_EVT_ADVIS_PUMP_OFF = 61816;
		final int NOM_EVT_ZERO_FAIL = 61818;
		final int NOM_EVT_ADVIS_ZERO_REQD = 61820;
		final int NOM_EVT_EXTR_HI = 61830;
		final int NOM_EVT_EXTR_LO = 61832;
		final int NOM_EVT_LEAD_DISCONN_YELLOW = 61833;
		final int NOM_EVT_LEAD_DISCONN_RED = 61834;
		final int NOM_EVT_CUFF_INFLAT_OVER_YELLOW = 61835;
		final int NOM_EVT_CUFF_INFLAT_OVER_RED = 61836;
		final int NOM_EVT_CUFF_NOT_DEFLATED_YELLOW = 61837;
		final int NOM_EVT_CUFF_NOT_DEFLATED_RED = 61838;
		final int NOM_EVT_ADVIS_ACTION_REQD = 61840;
		final int NOM_EVT_OUT_OF_AREA = 61842;
		final int NOM_EVT_LEADS_DISCONN = 61844;
		final int NOM_EVT_DEV_ASSOC_CHK = 61846;
		final int NOM_EVT_SYNCH_UNSUPPORTED = 61848;
		final int NOM_EVT_ECG_ADVIS_SRC_CHK = 61850;
		final int NOM_EVT_ALARM_TECH = 61852;
		final int NOM_EVT_ALARM_TECH_YELLOW = 61854;
		final int NOM_EVT_ALARM_TECH_RED = 61856;
		final int NOM_EVT_ALARM_MED_YELLOW_SHORT = 61858;
		final int NOM_EVT_ALARM_MED_YELLOW = 61860;
		final int NOM_EVT_ALARM_MED_RED = 61862;
		final int NOM_EVT_TELE_EQUIP_MALF = 61874;
		final int NOM_EVT_SYNCH_ERR_ECG = 61876;
		final int NOM_EVT_SYNCH_ERR_SPO2T = 61878;
		final int NOM_EVT_ADVIS_ACTION_REQD_YELLOW = 61880;
		final int NOM_EVT_ADVIS_NBP_SEQ_COMPLETED = 61882;
		final int NOM_EVT_PACER_OUTPUT_LO = 61884;
		final int NOM_EVT_ALARM_MORE_TECH = 61886;
		final int NOM_EVT_ALARM_MORE_TECH_YELLOW = 61888;
		final int NOM_EVT_ALARM_MORE_TECH_RED = 61890;
		final int NOM_EVT_ADVIS_PATIENT_CONFLICT = 61892;
		final int NOM_EVT_SENSOR_REPLACE = 61894;
		final int NOM_EVT_ECG_ATR_FIB = 61896;
		final int NOM_EVT_LIMITED_CONNECTIVITY = 61900;
		final int NOM_EVT_DISABLED = 61924;
		final int NOM_EVT_ECG_ABSENT = 61926;
		final int NOM_EVT_SRR_INTERF = 61928;
		final int NOM_EVT_SRR_INVALID_CHAN = 61930;
		final int NOM_EVT_EXT_DEV_DEMO = 62032;
		final int NOM_EVT_EXT_DEV_MONITORING = 62034;
	}

	public static class DataConstants {
		public final static short DataExportID = 0x11;
		public final static byte BOFCHAR = (byte) 0xC0;
		public final static byte EOFCHAR = (byte) 0xC1;
		public final static byte ESCAPECHAR = 0x7D;
		// public final byte BIT5 = 0x7C;
		public final static short BIT5COMPL = 0x20;
		public final static short[] FrameAbort = { 0x7d, 0xc1 };

		public static short[] aarq_msg = { 0x0D, 0xEC, 0x05, 0x08, 0x13, 0x01, 0x00, 0x16, 0x01, 0x02, 0x80, 0x00, 0x14,
				0x02, 0x00, 0x02, 0xC1, 0xDC, 0x31, 0x80, 0xA0, 0x80, 0x80, 0x01, 0x01, 0x00, 0x00, 0xA2, 0x80, 0xA0,
				0x03, 0x00, 0x00, 0x01, 0xA4, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0x06, 0x04, 0x52, 0x01, 0x00, 0x01,
				0x30, 0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x02, 0x01, 0x02, 0x06, 0x0C,
				0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x30, 0x80, 0x06, 0x0C, 0x2A,
				0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x60, 0x80, 0xA1, 0x80, 0x06, 0x0C, 0x2A, 0x86,
				0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0xBE, 0x80, 0x28, 0x80, 0x06,
				0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x02, 0x81,
				0x48, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
				0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2C, 0x00, 0x01, 0x00, 0x28, 0x80,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xC4, 0x00, 0x00, 0x09, 0xC4, 0x00, 0x00, 0x03, 0xE8, 0xFF, 0xFF,
				0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0C, 0xF0, 0x01, 0x00, 0x08, 0x8C, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00 };

		public static short[] aarq_msg_ext_poll = { 0x0D, 0xEC, 0x05, 0x08, 0x13, 0x01, 0x00, 0x16, 0x01, 0x02, 0x80,
				0x00, 0x14, 0x02, 0x00, 0x02, 0xC1, 0xDC, 0x31, 0x80, 0xA0, 0x80, 0x80, 0x01, 0x01, 0x00, 0x00, 0xA2,
				0x80, 0xA0, 0x03, 0x00, 0x00, 0x01, 0xA4, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0x06, 0x04, 0x52, 0x01,
				0x00, 0x01, 0x30, 0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x02, 0x01, 0x02,
				0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x30, 0x80, 0x06,
				0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x60, 0x80, 0xA1, 0x80, 0x06, 0x0C,
				0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0xBE, 0x80, 0x28,
				0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01,
				0x02, 0x81, 0x48, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
				0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2C, 0x00, 0x01, 0x00,
				0x28, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xC4, 0x00, 0x00, 0x09, 0xC4, 0x00, 0x00, 0x03, 0xE8,
				0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0C, 0xF0, 0x01, 0x00, 0x08, 0x8C,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

		public static short[] aarq_msg_ext_poll2 = { 0x0D, 0xEC, 0x05, 0x08, 0x13, 0x01, 0x00, 0x16, 0x01, 0x02, 0x80,
				0x00, 0x14, 0x02, 0x00, 0x02, 0xC1, 0xDC, 0x31, 0x80, 0xA0, 0x80, 0x80, 0x01, 0x01, 0x00, 0x00, 0xA2,
				0x80, 0xA0, 0x03, 0x00, 0x00, 0x01, 0xA4, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0x06, 0x04, 0x52, 0x01,
				0x00, 0x01, 0x30, 0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x02, 0x01, 0x02,
				0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x30, 0x80, 0x06,
				0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x60, 0x80, 0xA1, 0x80, 0x06, 0x0C,
				0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0xBE, 0x80, 0x28,
				0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01,
				0x02, 0x81, 0x48, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00,
				0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2C, 0x00, 0x01, 0x00,
				0x28, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x09, 0xC4, 0x00, 0x00, 0x03, 0xE8,
				0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0C, 0xF0, 0x01, 0x00, 0x08, 0x8C,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

		public static short[] aarq_msg_wave_ext_poll = { 0x0D, 0xEC, 0x05, 0x08, 0x13, 0x01, 0x00, 0x16, 0x01, 0x02,
				0x80, 0x00, 0x14, 0x02, 0x00, 0x02, 0xC1, 0xDC, 0x31, 0x80, 0xA0, 0x80, 0x80, 0x01, 0x01, 0x00, 0x00,
				0xA2, 0x80, 0xA0, 0x03, 0x00, 0x00, 0x01, 0xA4, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0x06, 0x04, 0x52,
				0x01, 0x00, 0x01, 0x30, 0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x02, 0x01,
				0x02, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x30, 0x80,
				0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80, 0x60, 0x80, 0xA1, 0x80, 0x06,
				0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0xBE, 0x80,
				0x28, 0x80, 0x06, 0x0C, 0x2A, 0x86, 0x48, 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02,
				0x01, 0x02, 0x81, 0x48, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
				0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x2C, 0x00, 0x01,
				0x00, 0x28, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x09, 0xC4, 0x00, 0x00, 0x03,
				0xE8, 0xFF, 0xFF, 0xFF, 0xFF, 0x60, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0C, 0xF0, 0x01, 0x00, 0x08,
				0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

		public static byte[] aarq_msg_wave_ext_poll2 = { 0x0D, (byte) 0xFF, 0x01, 0x28, 0x05, 0x08, 0x13, 0x01, 0x00,
				0x16, 0x01, 0x02, (byte) 0x80, 0x00, 0x14, 0x02, 0x00, 0x02, (byte) 0xC1, (byte) 0xFF, 0x01, 0x16, 0x31,
				(byte) 0x80, (byte) 0xA0, (byte) 0x80, (byte) 0x80, 0x01, 0x01, 0x00, 0x00, (byte) 0xA2, (byte) 0x80,
				(byte) 0xA0, 0x03, 0x00, 0x00, 0x01, (byte) 0xA4, (byte) 0x80, 0x30, (byte) 0x80, 0x02, 0x01, 0x01,
				0x06, 0x04, 0x52, 0x01, 0x00, 0x01, 0x30, (byte) 0x80, 0x06, 0x02, 0x51, 0x01, 0x00, 0x00, 0x00, 0x00,
				0x30, (byte) 0x80, 0x02, 0x01, 0x02, 0x06, 0x0C, 0x2A, (byte) 0x86, 0x48, (byte) 0xCE, 0x14, 0x02, 0x01,
				0x00, 0x00, 0x00, 0x01, 0x01, 0x30, (byte) 0x80, 0x06, 0x0C, 0x2A, (byte) 0x86, 0x48, (byte) 0xCE, 0x14,
				0x02, 0x01, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, (byte) 0x80, 0x30,
				(byte) 0x80, 0x02, 0x01, 0x01, (byte) 0xA0, (byte) 0x80, 0x60, (byte) 0x80, (byte) 0xA1, (byte) 0x80,
				0x06, 0x0C, 0x2A, (byte) 0x86, 0x48, (byte) 0xCE, 0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00,
				0x00, (byte) 0xBE, (byte) 0x80, 0x28, (byte) 0x80, 0x06, 0x0C, 0x2A, (byte) 0x86, 0x48, (byte) 0xCE,
				0x14, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x02, 0x01, 0x02, (byte) 0x81, (byte) 0x82, 0x00,
				(byte) 0x80, (byte) 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0x80,
				0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x64, 0x00, 0x01,
				0x00, 0x28, (byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, (byte) 0xA0, 0x00, 0x00, 0x05, (byte) 0xB0,
				0x00, 0x00, 0x05, (byte) 0xB0, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, 0x60, 0x00, 0x00,
				0x00, 0x00, 0x01, 0x00, 0x0C, (byte) 0xF0, 0x01, 0x00, 0x08, (byte) 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x01, 0x02, 0x00, 0x34, 0x00, 0x06, 0x00, 0x30, 0x00, 0x01, 0x00, 0x21, 0x00, 0x00, 0x00,
				0x01, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, (byte) 0xC9, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 0x00,
				0x3C, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x2A, 0x00, 0x00, 0x00, 0x01,
				0x00, 0x01, 0x00, 0x36, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

		};

		public static byte[] mds_create_resp_msg = { (byte) 0xE1, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00, 0x14, 0x00, 0x01,
				0x00, 0x01, 0x00, 0x0E, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, (byte) 0xBD, 0x00, 0x0D, 0x06,
				0x00, 0x00 };

		public static byte[] poll_mds_request_msg = { (byte) 0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1C, 0x00, 0x00,
				0x00, 0x07, 0x00, 0x16, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x16, 0x00,
				0x08, 0x00, 0x01, 0x00, 0x01, 0x00, 0x21, 0x00, 0x00 };

		public static short[] poll_request_msg = { 0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1C, 0x00, 0x00, 0x00,
				0x07, 0x00, 0x16, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x16, 0x00, 0x08,
				0x00, 0x01, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00 };

		public static short[] poll_request_msg2 = { 0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1C, 0x00, 0x01, 0x00,
				0x07, 0x00, 0x16, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x16, 0x00, 0x08,
				0x00, 0x01, 0x00, 0x01, 0x00, 0x21, 0x08, 0x0C };

		public static short[] poll_request_msg3 = { 0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x06, 0x00,
				0x07, 0x00, 0x16, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x16, 0x00, 0x08,
				0x00, 0x05, 0x00, 0x01, 0x00, 0x2a, 0x08, 0x07 };

		public static short[] poll_request_msg4 = { 0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x10, 0x00,
				0x07, 0x00, 0x16, 0x00, 0x21, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x16,
				0x00, 0x08, 0x00, 0x0f, 0x00, 0x01, 0x00, 0x20, 0x00, 0x36, 0x08, 0x11 };

		public static short[] ext_poll_request_msg3 = { 0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x04,
				0x00, 0x07, 0x00, 0x22, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x3b, 0x00,
				0x14, 0x00, 0x03, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xf1, 0x3e, 0x00, 0x04,
				0x00, 0x49, 0x3e, 0x00 };

		public static short[] ext_poll_request_msg = { 0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x20, 0x00, 0x01, 0x00,
				0x07, 0x00, 0x1A, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1, 0x3B, 0x00, 0x0C,
				0x00, 0x01, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

		public static short[] ext_poll_request_msg2 = { 0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x20, 0x00, 0x01,
				0x00, 0x07, 0x00, 0x1A, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1, 0x3B, 0x00,
				0x0E, 0x00, 0x01, 0x00, 0x01, 0x00, 0x06, 0x00, 0x01, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00 };

		public static short[] ext_poll_request_msg4 = { 0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x03,
				0x00, 0x07, 0x00, 0x22, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x3b, 0x00,
				0x14, 0x00, 0x02, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xf1, 0x3e, 0x00, 0x04,
				0x00, 0x49, 0x3e, 0x00 };

		public static byte[] ext_poll_request_msg5 = { (byte) 0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00,
				0x01, 0x00, 0x07, 0x00, 0x22, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xF1,
				0x3B, 0x00, 0x14, 0x00, 0x01, 0x00, 0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, (byte) 0xF1,
				0x3E, 0x00, 0x04, 0x00, 0x03, (byte) 0xA9, (byte) 0x80 };

		public static short[] ext_poll_request_wave_msg3 = { 0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x01,
				0x00, 0x07, 0x00, 0x22, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1, 0x3B, 0x00,
				0x14, 0x00, 0x02, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xF1, 0x3E, 0x00, 0x04,
				0x00, 0x03, 0xA9, 0x80 };

		public static byte[] ext_poll_request_wave_msg = { (byte) 0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00,
				0x04, 0x00, 0x07, 0x00, 0x22, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xf1,
				0x3b, 0x00, 0x14, 0x00, 0x03, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, (byte) 0xf1,
				0x3e, 0x00, 0x04, 0x00, 0x49, 0x3e, 0x00 };

		public static short[] ext_poll_request_wave_msg2 = { 0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x04,
				0x00, 0x07, 0x00, 0x22, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x3b, 0x00,
				0x14, 0x00, 0x03, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0xf1, 0x3e, 0x00, 0x04,
				0x00, 0x49, 0x3e, 0x00 };

		public static short[] ext_poll_request_alert_msg = { 0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x28, 0x00, 0x05,
				0x00, 0x07, 0x00, 0x22, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x3b, 0x00,
				0x14, 0x00, 0x04, 0x00, 0x01, 0x00, 0x36, 0x08, 0x01, 0x00, 0x01, 0x00, 0x08, 0xf1, 0x3e, 0x00, 0x04,
				0x00, 0x49, 0x3e, 0x00 };

		public static byte[] get_rtsa_prio_msg = { (byte) 0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x16, 0x00, 0x00,
				0x00, 0x03, 0x00, 0x10, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
				0x02, (byte) 0xF2, 0x3A };

		public static short[] keep_alive_msg = { 0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x01, 0x00, 0x07,
				0x00, 0x16, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x16, 0x00, 0x08, 0x00,
				0x01, 0x00, 0x01, 0x00, 0x21, 0x08, 0x0c };

		public static short[] set_rtsa_prio_msg = { 0xE1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x22, 0x00, 0x00, 0x00,
				0x05, 0x00, 0x1C, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0E,
				0x00, 0x00, 0xF2, 0x3A, 0x00, 0x08, 0x00, 0x01, 0x00, 0x04, 0x00, 0x02, 0x01, 0x02 };

		public static short[] keep_alive_msg2 = { 0xe1, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x1c, 0x00, 0x08, 0x00,
				0x07, 0x00, 0x16, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x16, 0x00, 0x08,
				0x00, 0x07, 0x00, 0x01, 0x00, 0x36, 0x08, 0x11 };

		public static short[] rlrq_msg = { 0x09, 0x18, 0xC1, 0x16, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0, 0x80,
				0x62, 0x80, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

		public static short[] rlrq_resp_msg = { 0x0A, 0x18, 0xC1, 0x16, 0x61, 0x80, 0x30, 0x80, 0x02, 0x01, 0x01, 0xA0,
				0x80, 0x63, 0x80, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

		public static byte[] assoc_abort_resp_msg = { 0x19, 0x2E, 0x11, 0x01, 0x03, (byte) 0xC1, 0x29, (byte) 0xA0,
				(byte) 0x80, (byte) 0xA0, (byte) 0x80, 0x30, (byte) 0x80, 0x02, 0x01, 0x01, 0x06, 0x02, 0x51, 0x01,
				0x00, 0x00, 0x00, 0x00, 0x61, (byte) 0x80, 0x30, (byte) 0x80, 0x02, 0x01, 0x01, (byte) 0xA0,
				(byte) 0x80, 0x64, (byte) 0x80, (byte) 0x80, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00 };

		// SessionHeader
		public final short CN_SPDU_SI = 0x0D;
		public final short AC_SPDU_SI = 0x0E;
		public final short RF_SPDU_SI = 0x0C;
		public final short FN_SPDU_SI = 0x09;
		public final short DN_SPDU_SI = 0x0A;
		public final short AB_SPDU_SI = 0x19;
		public final short DA_SPDU_SI = 0xE1;

		// ROapdus
		public final static int ROIV_APDU = 1;
		public final static int RORS_APDU = 2;
		public final static int ROER_APDU = 3;
		public final static int RORLS_APDU = 5;

		// RORSapdu
		public final short CMD_EVENT_REPORT = 0;
		public final short CMD_CONFIRMED_EVENT_REPORT = 1;
		public final short CMD_GET = 3;
		public final short CMD_SET = 4;
		public final short CMD_CONFIRMED_SET = 5;
		public final short CMD_CONFIRMED_ACTION = 7;

		// RORLSapdu
		public final short RORLS_FIRST = 1; /* set in the first message */
		public final short RORLS_NOT_FIRST_NOT_LAST = 2;
		public final short RORLS_LAST = 3; /*
											 * last RORLSapdu, one RORSapdu to follow
											 */

		// ActionType
		public final static short NOM_ACT_POLL_MDIB_DATA = 3094; // Single poll
		public final static short NOM_ACT_POLL_MDIB_DATA_EXT = (short) 61755; // Extended
																				// poll

		// ReceiveState
		public final short STATE_SEARCH_FRAME = 1;
		public final short STATE_READ_FRAME = 2;
		public final short STATE_FINISHED_FRAME = 3;

		// MeasurementState
		public final int INVALID = 0x8000;
		public final int QUESTIONABLE = 0x4000;
		public final int UNAVAILABLE = 0x2000;
		public final int CALIBRATION_ONGOING = 0x1000;
		public final int TEST_DATA = 0x0800;
		public final int DEMO_DATA = 0x0400;
		public final int VALIDATED_DATA = 0x0080;
		public final int EARLY_INDICATION = 0x0040;
		public final int MSMT_ONGOING = 0x0020;
		public final int MSMT_STATE_IN_ALARM = 0x0002;
		public final int MSMT_STATE_AL_INHIBITED = 0x0001;

		public final static int FLOATTYPE_NAN = 0x007FFFFF;
		public final int FLOATTYPE_NRes = 0x800000;
		public final int FLOATTYPE_POSITIVE_INFINITY = 0x7FFFFE;
		public final int FLOATTYPE_NEGATIVE_INFINITY = 0x800002;

		// MetricCategory
		public final short MCAT_UNSPEC = 0;
		public final short AUTO_MEASUREMENT = 1;
		public final short MANUAL_MEASUREMENT = 2;
		public final short AUTO_SETTING = 3;
		public final short MANUAL_SETTING = 4;
		public final short AUTO_CALCULATION = 5;
		public final short MANUAL_CALCULATION = 6;
		public final short MULTI_DYNAMIC_CAPABILITIES = 50;
		public final short AUTO_ADJUST_PAT_TEMP = 128;
		public final short MANUAL_ADJUST_PAT_TEMP = 129;
		public final short AUTO_ALARM_LIMIT_SETTING = 130;

		public final int AVAIL_INTERMITTEND = 0x8000;
		public final int UPD_PERIODIC = 0x4000;
		public final int UPD_EPISODIC = 0x2000;
		public final int MSMT_NONCONTINUOUS = 0x1000;

		// PollProfileExtOptions
		public final int POLL_EXT_PERIOD_NU_1SEC = 0x80000000;
		public final int POLL_EXT_PERIOD_NU_AVG_12SEC = 0x40000000;
		public final int POLL_EXT_PERIOD_NU_AVG_60SEC = 0x20000000;
		public final int POLL_EXT_PERIOD_NU_AVG_300SEC = 0x10000000;
		public final int POLL_EXT_PERIOD_RTSA = 0x08000000;
		public final int POLL_EXT_ENUM = 0x04000000;
		public final int POLL_EXT_NU_PRIO_LIST = 0x02000000;
		public final int POLL_EXT_DYN_MODALITIES = 0x01000000;

		// -----------------------------------------------------------------------------

		public final static short NOM_MOC_VMS_MDS = 33;
		// MDS
		public final static int NOM_ATTR_METRIC_SPECN = 2367;
		public final static int NOM_ATTR_ID_HANDLE = 2337;
		public final static int NOM_ATTR_ID_LABEL = 2340;
		public final static int NOM_ATTR_ID_LABEL_STRING = 2343;
		public final static int NOM_ATTR_NU_CMPD_VAL_OBS = 2379;
		public final static int NOM_ATTR_NU_VAL_OBS = 2384;
		public final int NOM_ATTR_SYS_TYPE = 0x986;
		public final static int NOM_ATTR_SA_CALIB_I16 = 0x964;
		// Compound Sample Array Observed Value
		public final static int NOM_ATTR_SA_CMPD_VAL_OBS = 0x967;
		// Sample Array Physiological Range
		public final int NOM_ATTR_SA_RANGE_PHYS_I16 = 0x96a;
		// Sample Array Specification
		public final static int NOM_ATTR_SA_SPECN = 0x96d;
		// Sample Array Observed Value
		public final static int NOM_ATTR_SA_VAL_OBS = 0x96e;
		// Scale and Range Specification
		public final static int NOM_ATTR_SCALE_SPECN_I16 = 0x96f;

		// Date and Time
		public final static int NOM_ATTR_TIME_ABS = 0x987;
		// Sample Period
		public final int NOM_ATTR_TIME_PD_SAMP = 0x98d;
		// Relative Time
		public final static int NOM_ATTR_TIME_REL = 0x98f;
		// Absolute Time Stamp
		public final static int NOM_ATTR_TIME_STAMP_ABS = 0x990;
		// Relative Time Stamp
		public final static int NOM_ATTR_TIME_STAMP_REL = 0x991;
		// Patient Date of Birth
		public final static int NOM_ATTR_PT_DOB = 0x958;
		// Patient ID
		public final static int NOM_ATTR_PT_ID = 0x95a;
		// Family Name
		public final static int NOM_ATTR_PT_NAME_FAMILY = 0x95c;
		// Given Name
		public final static int NOM_ATTR_PT_NAME_GIVEN = 0x95d;
		// Patient Sex
		public final static int NOM_ATTR_PT_SEX = 0x961;

		// -----------------------------------------------------------------------------

		public final int MDDL_VERSION1 = 0x80000000;
		public final int NOM_ATTR_POLL_PROFILE_EXT = 61441;
		public final short NOM_POLL_PROFILE_SUPPORT = 1;

		public final short VAL_METRIC_SPEC = 1;
		public final short VAL_LABEL = 2;
		public final short VAL_LABEL_STRING = 4;
		public final byte VAL_VALUE = 8;

		/**
		 * 
		 * WavesIDLabels are 32 bit unsigned integers
		 *
		 */
		public static class WavesIDLabels {
			public final static int NLS_NOM_ECG_ELEC_POTL = 0x00020100;
			public final static int NLS_NOM_ECG_ELEC_POTL_I = 0x00020101;
			public final static int NLS_NOM_ECG_ELEC_POTL_II = 0x00020102;
			public final static int NLS_NOM_ECG_ELEC_POTL_III = 0x0002013D;
			public final static int NLS_NOM_ECG_ELEC_POTL_AVR = 0x0002013E;
			public final static int NLS_NOM_ECG_ELEC_POTL_AVL = 0x0002013F;
			public final static int NLS_NOM_ECG_ELEC_POTL_AVF = 0x00020140;
			public final static int NLS_NOM_ECG_ELEC_POTL_V1 = 0x00020103;
			public final static int NLS_NOM_ECG_ELEC_POTL_V2 = 0x00020104;
			public final static int NLS_NOM_ECG_ELEC_POTL_V3 = 0x00020105;
			public final static int NLS_NOM_ECG_ELEC_POTL_V4 = 0x00020106;
			public final static int NLS_NOM_ECG_ELEC_POTL_V5 = 0x00020107;
			public final static int NLS_NOM_ECG_ELEC_POTL_V6 = 0x00020108;
			public final static int NLS_NOM_PULS_OXIM_PLETH = 0x00024BB4;
			public final static int NLS_NOM_PRESS_BLD_ART = 0x00024A10;
			public final static int NLS_NOM_PRESS_BLD_ART_ABP = 0x00024A14;
			public final static int NLS_NOM_PRESS_BLD_VEN_CENT = 0x00024A44;
			public final static int NLS_NOM_RESP = 0x00025000;
			public final static int NLS_NOM_AWAY_CO2 = 0x000250AC;
			public final static int NLS_NOM_PRESS_AWAY = 0x000250F0;
			public final static int NLS_NOM_FLOW_AWAY = 0x000250D4;
			public final static int NLS_EEG_NAMES_EEG_CHAN1_LBL = 0x800F5401;
			public final static int NLS_EEG_NAMES_EEG_CHAN2_LBL = 0x800F5402;
			public final static int NLS_EEG_NAMES_EEG_CHAN3_LBL = 0x800F5432;
			public final static int NLS_EEG_NAMES_EEG_CHAN4_LBL = 0x800F5434;
			public final static int NLS_NOM_PRESS_INTRA_CRAN = 0x00025808;
			public final static int NLS_NOM_PRESS_INTRA_CRAN_2 = 0x0002F0B8;
			public final static int NLS_NOM_TEMP_BLD = 0x0002E014;

		}
	}

	public static class AttributeIDs {
		// Device P-Alarm List
		public static final short NOM_ATTR_AL_MON_P_AL_LIST = 0x902;
		public static final short
		// Device T-Alarm List
		NOM_ATTR_AL_MON_T_AL_LIST = 0x90;
		public static final int
		// Altitude
		NOM_ATTR_ALTITUDE = 0x90c;
		public static final int
		// Application Area
		NOM_ATTR_AREA_APPL = 0x90d;
		public static final int
		// Color
		NOM_ATTR_COLOR = 0x911;
		public static final int
		// Device Alert Condition
		NOM_ATTR_DEV_AL_COND = 0x916;
		public static final int
		// Display Resolution
		NOM_ATTR_DISP_RES = 0x917;
		public static final int
		// Visual Grid
		NOM_ATTR_GRID_VIS_I16 = 0x91a;
		public static final int
		// Association Invoke Id
		NOM_ATTR_ID_ASSOC_NO = 0x91d;
		public static final int
		// Bed Label
		NOM_ATTR_ID_BED_LABEL = 0x91e;
		public static final int
		// Object Handle
		NOM_ATTR_ID_HANDLE = 0x921;
		public static final int
		// Label
		NOM_ATTR_ID_LABEL = 0x924;
		public static final int
		// Label String
		NOM_ATTR_ID_LABEL_STRING = 0x927;
		public static final int
		// System Model
		NOM_ATTR_ID_MODEL = 0x928;
		public static final int
		// Product Specification
		NOM_ATTR_ID_PROD_SPECN = 0x92d;
		public static final int
		// Object Type
		NOM_ATTR_ID_TYPE = 0x92f;
		public static final int
		// Line Frequency
		NOM_ATTR_LINE_FREQ = 0x935;
		public static final int
		// System Localization
		NOM_ATTR_LOCALIZN = 0x937;
		public static final int
		// Metric Info Label
		NOM_ATTR_METRIC_INFO_LABEL = 0x93c;
		public static final int
		// Metric Info Label String
		NOM_ATTR_METRIC_INFO_LABEL_STR = 0x93d;
		public static final int
		// Metric Specification
		NOM_ATTR_METRIC_SPECN = 0x93f;
		public static final int
		// Metric State
		NOM_ATTR_METRIC_STAT = 0x940;
		public static final int
		// Measure Mode
		NOM_ATTR_MODE_MSMT = 0x945;
		public static final int
		// Operating Mode
		NOM_ATTR_MODE_OP = 0x946;
		public static final int
		// Nomenclature Version
		NOM_ATTR_NOM_VERS = 0x948;
		public static final int
		// Compound Numeric Observed Value
		NOM_ATTR_NU_CMPD_VAL_OBS = 0x94b;
		public static final int
		// Numeric Observed Value
		NOM_ATTR_NU_VAL_OBS = 0x950;
		public static final int
		// Patient BSA
		NOM_ATTR_PT_BSA = 0x956;
		public static final int
		// Pat Demo State
		NOM_ATTR_PT_DEMOG_ST = 0x957;
		public static final int
		// Patient Date of Birth
		NOM_ATTR_PT_DOB = 0x958;
		public static final int
		// Patient ID
		NOM_ATTR_PT_ID = 0x95a;
		public static final int
		// Family Name
		NOM_ATTR_PT_NAME_FAMILY = 0x95c;
		public static final int
		// Given Name
		NOM_ATTR_PT_NAME_GIVEN = 0x95d;
		public static final int
		// Patient Sex
		NOM_ATTR_PT_SEX = 0x961;
		public static final int
		// Patient Type
		NOM_ATTR_PT_TYPE = 0x962;
		public static final int
		// Sample Array Calibration Specification
		NOM_ATTR_SA_CALIB_I16 = 0x964;
		public static final int
		// Compound Sample Array Observed Value
		NOM_ATTR_SA_CMPD_VAL_OBS = 0x967;
		public static final int
		// Sample Array Physiological Range
		NOM_ATTR_SA_RANGE_PHYS_I16 = 0x96a;
		public static final int
		// Sample Array Specification
		NOM_ATTR_SA_SPECN = 0x96d;
		public static final int
		// Sample Array Observed Value
		NOM_ATTR_SA_VAL_OBS = 0x96e;
		public static final int
		// Scale and Range Specification
		NOM_ATTR_SCALE_SPECN_I16 = 0x96f;
		public static final int
		// Safety Standard
		NOM_ATTR_STD_SAFETY = 0x982;
		public static final int
		// System ID
		NOM_ATTR_SYS_ID = 0x984;
		public static final int
		// System Specification
		NOM_ATTR_SYS_SPECN = 0x985;
		public static final int
		// System Type
		NOM_ATTR_SYS_TYPE = 0x986;
		public static final int
		// Date and Time
		NOM_ATTR_TIME_ABS = 0x987;
		public static final int
		// Sample Period
		NOM_ATTR_TIME_PD_SAMP = 0x98d;
		public static final int
		// Relative Time
		NOM_ATTR_TIME_REL = 0x98f;
		public static final int
		// Absolute Time Stamp
		NOM_ATTR_TIME_STAMP_ABS = 0x990;
		public static final int
		// Relative Time Stamp
		NOM_ATTR_TIME_STAMP_REL = 0x991;
		public static final int
		// Unit Code
		NOM_ATTR_UNIT_CODE = 0x996;
		public static final int
		// Enumeration Observed Value
		NOM_ATTR_VAL_ENUM_OBS = 0x99e;
		public static final int
		// MDS Status
		NOM_ATTR_VMS_MDS_STAT = 0x9a7;
		public static final int
		// Patient Age
		NOM_ATTR_PT_AGE = 0x9d8;
		public static final int
		// Patient Height
		NOM_ATTR_PT_HEIGHT = 0x9dc;
		public static final int
		// Patient Weight
		NOM_ATTR_PT_WEIGHT = 0x9df;
		public static final int
		// Sample Array Fixed Values Specification
		NOM_ATTR_SA_FIXED_VAL_SPECN = 0xa16;
		public static final int
		// Patient Paced Mode
		NOM_ATTR_PT_PACED_MODE = 0xa1e;
		public static final int
		// Internal Patient ID
		NOM_ATTR_PT_ID_INT = 0xf001;
		public static final int
		// Private Attribute
		NOM_SAT_O2_TONE_FREQ = 0xf008;
		public static final int
		// Private Attribute
		NOM_ATTR_CMPD_REF_LIST = 0xf009;
		public static final int
		// IP Address Information
		NOM_ATTR_NET_ADDR_INFO = 0xf100;
		public static final int
		// Protocol Support
		NOM_ATTR_PCOL_SUPPORT = 0xf101;
		public static final int
		// Notes1
		NOM_ATTR_PT_NOTES1 = 0xf129;
		public static final int
		// Notes2
		NOM_ATTR_PT_NOTES2 = 0xf12a;
		public static final int
		// Time for Periodic Polling
		NOM_ATTR_TIME_PD_POLL = 0xf13e;
		public static final int
		// Patient BSA Formula
		NOM_ATTR_PT_BSA_FORMULA = 0xf1ec;
		public static final int
		// Mds General System Info
		NOM_ATTR_MDS_GEN_INFO = 0xf1fa;
		public static final int
		// no of prioritized objects for poll request
		NOM_ATTR_POLL_OBJ_PRIO_NUM = 0xf228;
		public static final int
		// Numeric Object Priority List
		NOM_ATTR_POLL_NU_PRIO_LIST = 0xf239;
		public static final int
		// Wave Object Priority List
		NOM_ATTR_POLL_RTSA_PRIO_LIST = 0xf23a;
		public static final int
		// Metric Modality
		NOM_ATTR_METRIC_MODALITY = 0xf294;
		public static final int
		// The attributes are arranged in the following attribute groups:
		// Alert Monitor Group
		NOM_ATTR_GRP_AL_MON = 0x801;
		public static final int
		// Metric Observed Value Group
		NOM_ATTR_GRP_METRIC_VAL_OBS = 0x803;
		public static final int
		// Patient Demographics Attribute Group
		NOM_ATTR_GRP_PT_DEMOG = 0x807;
		public static final int
		// System Application Attribute Group
		NOM_ATTR_GRP_SYS_APPL = 0x80a;
		public static final int
		// System Identification Attribute Group
		NOM_ATTR_GRP_SYS_ID = 0x80b;
		public static final int
		// System Production Attribute Group
		NOM_ATTR_GRP_SYS_PROD = 0x80c;
		public static final int
		// VMO Dynamic Attribute Group
		NOM_ATTR_GRP_VMO_DYN = 0x810;
		public static final int
		// VMO Static Attribute Group
		NOM_ATTR_GRP_VMO_STATIC = 0x811;
	}

	public static class Commands {
		public static final int CMD_EVENT_REPORT = 0;
		public static final int CMD_CONFIRMED_EVENT_REPORT = 1;
		public static final int CMD_GET = 3;
		public static final int CMD_SET = 4;
		public static final int CMD_CONFIRMED_SET = 5;
		public static final int CMD_CONFIRMED_ACTION = 7;
	}

	public static class RemoteOperationHeader {
		public static final int ROIV_APDU = 1;
		// request/command from client (PC)
		public static final int RORS_APDU = 2;
		// single frame result from monitor except error
		public static final int ROER_APDU = 3;
		// remote operation error
		public static final int ROLRS_APDU = 5;
		// e.g. Single Poll Linked Result
	}
}
